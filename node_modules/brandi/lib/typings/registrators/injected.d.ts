import { ToToken, TokenValue } from '../pointers';
import { UnknownCreator, UnknownCreatorParameters } from '../types';
declare type ToTokens<T extends unknown[]> = {
    [K in keyof T]-?: ToToken<T[K]>;
};
/**
 * @description
 * Registers target injections.
 *
 * @param target - constructor or function whose dependencies will be injected.
 * @param ...tokens - dependency tokens.
 * @returns the `target` first argument.
 *
 * @link https://brandi.js.org/reference/pointers-and-registrators#injectedtarget-tokens
 */
export declare const injected: <T extends UnknownCreator<unknown>>(target: T, ...tokens: ToTokens<UnknownCreatorParameters<T>> extends TokenValue<unknown>[] ? ToTokens<UnknownCreatorParameters<T>> : never) => T;
export {};
