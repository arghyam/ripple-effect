import { AsyncFactory, Factory, ResolutionCondition, UnknownCreator } from '../../types';
import { Token } from '../../pointers';
import { BindingsVault } from '../BindingsVault';
import { ScopeSyntax } from './ScopeSyntax';
export declare class TypeSyntax<Dependency> {
    private readonly vault;
    private readonly token;
    private readonly condition?;
    constructor(vault: BindingsVault, token: Token, condition?: ResolutionCondition | undefined);
    /**
     * @description
     * Binds the token to the constant value.
     *
     * @param value - the value that will be bound to the token.
     *
     * @link https://brandi.js.org/reference/binding-types#toconstantvalue
     */
    toConstant(value: Dependency): void;
    /**
     * @description
     * Binds the token to the factory.
     *
     * @param creator - the instance creator which the factory will use;
     * @param [initializer] - optional function called after the instance is created.
     *
     * @link https://brandi.js.org/reference/binding-types#tofactorycreator-initializer
     */
    toFactory(creator: Dependency extends AsyncFactory<infer Instance, never[]> ? UnknownCreator<Promise<Instance>> : never, initializer?: Dependency extends AsyncFactory<infer Instance, infer Arguments> ? (instance: Instance, ...args: Arguments) => unknown : never): void;
    /**
     * @description
     * Binds the token to the factory.
     *
     * @param creator - the instance creator which the factory will use;
     * @param [initializer] - optional function called after the instance is created.
     *
     * @link https://brandi.js.org/reference/binding-types#tofactorycreator-initializer
     */
    toFactory(creator: Dependency extends AsyncFactory<infer Instance, never[]> ? UnknownCreator<Instance> : never, initializer: Dependency extends AsyncFactory<infer Instance, infer Arguments> ? (instance: Instance, ...args: Arguments) => Promise<unknown> : never): void;
    /**
     * @description
     * Binds the token to the factory.
     *
     * @param creator - the instance creator which the factory will use;
     * @param [initializer] - optional function called after the instance is created.
     *
     * @link https://brandi.js.org/reference/binding-types#tofactorycreator-initializer
     */
    toFactory<InitializerReturnType>(creator: Dependency extends Factory<infer Instance, never[]> ? Instance extends Promise<unknown> ? never : UnknownCreator<Instance> : never, initializer?: Dependency extends Factory<infer Instance, infer Arguments> ? InitializerReturnType extends Promise<unknown> ? never : (instance: Instance, ...args: Arguments) => InitializerReturnType : never): void;
    /**
     * @description
     * Binds the token to an instance in one of the scopes.
     *
     * @param creator - the instance creator that will be bound to the token.
     *
     * @returns
     * Scope syntax:
     *   - `inSingletonScope()`
     *   - `inTransientScope()`
     *   - `inContainerScope()`
     *   - `inResolutionScope()`
     *
     * @link https://brandi.js.org/reference/binding-types#toinstancecreator
     */
    toInstance(creator: UnknownCreator<Dependency>): ScopeSyntax;
}
