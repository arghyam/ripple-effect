import { Tag } from './pointers';
export declare type ResolutionCondition = Tag | UnknownCreator;
declare type UnknownConstructor<T extends Object = Object> = new (...args: never[]) => T;
declare type UnknownFunction<T = unknown> = (...args: never[]) => T;
export declare type UnknownCreator<T = unknown> = UnknownConstructor<T> | UnknownFunction<T>;
export declare type UnknownCreatorParameters<T extends UnknownCreator> = T extends UnknownConstructor ? ConstructorParameters<T> : T extends UnknownFunction ? Parameters<T> : never;
export declare type Factory<T extends unknown, A extends unknown[] = []> = (...args: A) => T;
export declare type AsyncFactory<T extends unknown, A extends unknown[] = []> = Factory<Promise<T>, A>;
export {};
